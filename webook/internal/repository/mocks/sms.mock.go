// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/sms.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/sms.go -package=repomocks -destination=./internal/repository/mocks/sms.mock.go
//

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"
	domain "webook/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockSmsRepository is a mock of SmsRepository interface.
type MockSmsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSmsRepositoryMockRecorder
}

// MockSmsRepositoryMockRecorder is the mock recorder for MockSmsRepository.
type MockSmsRepositoryMockRecorder struct {
	mock *MockSmsRepository
}

// NewMockSmsRepository creates a new mock instance.
func NewMockSmsRepository(ctrl *gomock.Controller) *MockSmsRepository {
	mock := &MockSmsRepository{ctrl: ctrl}
	mock.recorder = &MockSmsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmsRepository) EXPECT() *MockSmsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSmsRepository) Create(ctx context.Context, sms domain.Sms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sms)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSmsRepositoryMockRecorder) Create(ctx, sms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSmsRepository)(nil).Create), ctx, sms)
}

// DeleteById mocks base method.
func (m *MockSmsRepository) DeleteById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockSmsRepositoryMockRecorder) DeleteById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockSmsRepository)(nil).DeleteById), ctx, id)
}

// FindFirstSms mocks base method.
func (m *MockSmsRepository) FindFirstSms(ctx context.Context) (domain.Sms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstSms", ctx)
	ret0, _ := ret[0].(domain.Sms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstSms indicates an expected call of FindFirstSms.
func (mr *MockSmsRepositoryMockRecorder) FindFirstSms(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstSms", reflect.TypeOf((*MockSmsRepository)(nil).FindFirstSms), ctx)
}

// UpdateRetryLeft mocks base method.
func (m *MockSmsRepository) UpdateRetryLeft(ctx context.Context, id int64, retryLeft int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetryLeft", ctx, id, retryLeft)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRetryLeft indicates an expected call of UpdateRetryLeft.
func (mr *MockSmsRepositoryMockRecorder) UpdateRetryLeft(ctx, id, retryLeft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetryLeft", reflect.TypeOf((*MockSmsRepository)(nil).UpdateRetryLeft), ctx, id, retryLeft)
}
